#version 330 core
out vec4 FragColor;

struct Material {
    sampler2D diffuse;
    sampler2D specular;   
    float shininess;
}; 

struct Light {
    vec3 position;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

in vec3 Normal;  
in vec3 FragPos;  
in vec2 TexCoords;

uniform vec3 viewPos;
uniform Material material;
uniform Light light;

void main()
{
    // ambient环境光照
    vec3 ambient = light.ambient * texture(material.diffuse, TexCoords).rgb;
  	
    // diffuse 漫反射
	//法向量
    vec3 norm = normalize(Normal);
	//定向的光线：作为光源的位置与片段的位置之间向量差的方向向量。
    vec3 lightDir = normalize(light.position - FragPos);
	/*
	如果两个向量之间的角度大于90度，点乘的结果就会变成负数，这样会导致漫反射分量变为负数。
	为此，我们使用max函数返回两个参数之间较大的参数，从而保证漫反射分量不会变成负数。
	*/
    float diff = max(dot(norm, lightDir), 0.0);
     vec3 diffuse = light.diffuse * diff * texture(material.diffuse, TexCoords).rgb;  
    
    // specular镜面光照
	//镜面强度
    vec3 viewDir = normalize(viewPos - FragPos);
	/*
	reflect函数要求第一个向量是从光源指向片段位置的向量，但是lightDir当前正好相反，是从片段指向光源（由先前我们计算lightDir向量时，减法的顺序决定）。
	为了保证我们得到正确的reflect向量，我们通过对lightDir向量取反来获得相反的方向。
	第二个参数要求是一个法向量，所以我们提供的是已标准化的norm向量。
	*/
    vec3 reflectDir = reflect(-lightDir, norm);  
	/*
	这个32是高光的反光度(Shininess)。一个物体的反光度越高，反射光的能力越强，散射得越少，高光点就会越小。
	*/
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
	vec3 specular = light.specular * spec * texture(material.specular, TexCoords).rgb; 
        
    vec3 result = ambient + diffuse + specular;
    FragColor = vec4(result, 1.0);
} 