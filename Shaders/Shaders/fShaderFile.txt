//第五步片段着色器fragment shader
	/*
		片段着色器只需要一个输出变量，这个变量是一个4分量向量，它表示的是最终的输出颜色。
		我们可以用out关键字声明输出变量，这里我们命名为FragColor。
		我们将一个alpha值为1.0(1.0代表完全不透明)的橘黄色的vec4赋值给颜色输出。
	*/
	/*
		如果我们打算从一个着色器向另一个着色器发送数据，我们必须在发送方着色器中声明一个输出，在接收方着色器中声明一个类似的输入。
		当类型和名字都一样的时候，OpenGL就会把两个变量链接到一起，它们之间就能发送数据了（这是在链接程序对象时完成的）。
	*/
	/*
		Uniform是一种******从CPU中的应用向GPU中的着色器发送数据的方式**********，但uniform和顶点属性有些不同。
		首先，uniform是全局的(Global)。
			全局意味着uniform变量必须在每个着色器程序对象中都是独一无二的，而且它可以被着色器程序的任意着色器在任意阶段访问。
		第二，无论你把uniform值设置成什么，uniform会一直保存它们的数据，直到它们被重置或更新。
		我们可以在一个着色器中添加uniform关键字至类型和变量名前来声明一个GLSL的uniform。
		从此处开始我们就可以在着色器中使用新声明的uniform了

	*/
 #version 330 core
out vec4 FragColor;
in vec3 ourColor;
//uniform vec4 ourColor;
void main()
{
   //FragColor = vec4(1.0f, 0.5f, 0.2f, 1.0f);
	//FragColor = ourColor;
	FragColor = vec4(ourColor, 1.0);
}